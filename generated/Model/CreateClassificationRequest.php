<?php

namespace Sourceability\OpenAIClient\Generated\Model;

class CreateClassificationRequest
{
    /**
     * @var array
     */
    protected $initialized = array();
    public function isInitialized($property) : bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     *
     * @var string
     */
    protected $model;
    /**
     * Query to be classified.
     *
     * @var string
     */
    protected $query;
    /**
    * A list of examples with labels, in the following format:
    
    `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`
    
    All the label strings will be normalized to be capitalized.
    
    You should specify either `examples` or `file`, but not both.
    
    *
    * @var string[][]|null
    */
    protected $examples;
    /**
    * The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
    
    You should specify either `examples` or `file`, but not both.
    
    *
    * @var string|null
    */
    protected $file;
    /**
     * The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
     *
     * @var string[]|null
     */
    protected $labels;
    /**
     * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     *
     * @var string|null
     */
    protected $searchModel = 'ada';
    /**
     * What sampling `temperature` to use. Higher values mean the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.
     *
     * @var float|null
     */
    protected $temperature = 0;
    /**
    * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
    
    The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
    
    When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
    
    *
    * @var int|null
    */
    protected $logprobs;
    /**
     * The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     *
     * @var int|null
     */
    protected $maxExamples = 200;
    /**
    * Modify the likelihood of specified tokens appearing in the completion.
    
    Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    
    As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
    
    *
    * @var mixed[]|null
    */
    protected $logitBias;
    /**
     * If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     *
     * @var bool|null
     */
    protected $returnPrompt = false;
    /**
    * A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
    
    This flag only takes effect when `file` is set.
    
    *
    * @var bool|null
    */
    protected $returnMetadata = false;
    /**
     * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
     *
     * @var mixed[]|null
     */
    protected $expand = array();
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @var string
     */
    protected $user;
    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     *
     * @return string
     */
    public function getModel() : string
    {
        return $this->model;
    }
    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     *
     * @param string $model
     *
     * @return self
     */
    public function setModel(string $model) : self
    {
        $this->initialized['model'] = true;
        $this->model = $model;
        return $this;
    }
    /**
     * Query to be classified.
     *
     * @return string
     */
    public function getQuery() : string
    {
        return $this->query;
    }
    /**
     * Query to be classified.
     *
     * @param string $query
     *
     * @return self
     */
    public function setQuery(string $query) : self
    {
        $this->initialized['query'] = true;
        $this->query = $query;
        return $this;
    }
    /**
    * A list of examples with labels, in the following format:
    
    `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`
    
    All the label strings will be normalized to be capitalized.
    
    You should specify either `examples` or `file`, but not both.
    
    *
    * @return string[][]|null
    */
    public function getExamples() : ?array
    {
        return $this->examples;
    }
    /**
    * A list of examples with labels, in the following format:
    
    `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`
    
    All the label strings will be normalized to be capitalized.
    
    You should specify either `examples` or `file`, but not both.
    
    *
    * @param string[][]|null $examples
    *
    * @return self
    */
    public function setExamples(?array $examples) : self
    {
        $this->initialized['examples'] = true;
        $this->examples = $examples;
        return $this;
    }
    /**
    * The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
    
    You should specify either `examples` or `file`, but not both.
    
    *
    * @return string|null
    */
    public function getFile() : ?string
    {
        return $this->file;
    }
    /**
    * The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
    
    You should specify either `examples` or `file`, but not both.
    
    *
    * @param string|null $file
    *
    * @return self
    */
    public function setFile(?string $file) : self
    {
        $this->initialized['file'] = true;
        $this->file = $file;
        return $this;
    }
    /**
     * The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
     *
     * @return string[]|null
     */
    public function getLabels() : ?array
    {
        return $this->labels;
    }
    /**
     * The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
     *
     * @param string[]|null $labels
     *
     * @return self
     */
    public function setLabels(?array $labels) : self
    {
        $this->initialized['labels'] = true;
        $this->labels = $labels;
        return $this;
    }
    /**
     * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     *
     * @return string|null
     */
    public function getSearchModel() : ?string
    {
        return $this->searchModel;
    }
    /**
     * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     *
     * @param string|null $searchModel
     *
     * @return self
     */
    public function setSearchModel(?string $searchModel) : self
    {
        $this->initialized['searchModel'] = true;
        $this->searchModel = $searchModel;
        return $this;
    }
    /**
     * What sampling `temperature` to use. Higher values mean the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.
     *
     * @return float|null
     */
    public function getTemperature() : ?float
    {
        return $this->temperature;
    }
    /**
     * What sampling `temperature` to use. Higher values mean the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.
     *
     * @param float|null $temperature
     *
     * @return self
     */
    public function setTemperature(?float $temperature) : self
    {
        $this->initialized['temperature'] = true;
        $this->temperature = $temperature;
        return $this;
    }
    /**
    * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
    
    The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
    
    When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
    
    *
    * @return int|null
    */
    public function getLogprobs() : ?int
    {
        return $this->logprobs;
    }
    /**
    * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
    
    The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
    
    When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
    
    *
    * @param int|null $logprobs
    *
    * @return self
    */
    public function setLogprobs(?int $logprobs) : self
    {
        $this->initialized['logprobs'] = true;
        $this->logprobs = $logprobs;
        return $this;
    }
    /**
     * The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     *
     * @return int|null
     */
    public function getMaxExamples() : ?int
    {
        return $this->maxExamples;
    }
    /**
     * The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     *
     * @param int|null $maxExamples
     *
     * @return self
     */
    public function setMaxExamples(?int $maxExamples) : self
    {
        $this->initialized['maxExamples'] = true;
        $this->maxExamples = $maxExamples;
        return $this;
    }
    /**
    * Modify the likelihood of specified tokens appearing in the completion.
    
    Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    
    As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
    
    *
    * @return mixed[]|null
    */
    public function getLogitBias() : ?iterable
    {
        return $this->logitBias;
    }
    /**
    * Modify the likelihood of specified tokens appearing in the completion.
    
    Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    
    As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
    
    *
    * @param mixed[]|null $logitBias
    *
    * @return self
    */
    public function setLogitBias(?iterable $logitBias) : self
    {
        $this->initialized['logitBias'] = true;
        $this->logitBias = $logitBias;
        return $this;
    }
    /**
     * If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     *
     * @return bool|null
     */
    public function getReturnPrompt() : ?bool
    {
        return $this->returnPrompt;
    }
    /**
     * If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     *
     * @param bool|null $returnPrompt
     *
     * @return self
     */
    public function setReturnPrompt(?bool $returnPrompt) : self
    {
        $this->initialized['returnPrompt'] = true;
        $this->returnPrompt = $returnPrompt;
        return $this;
    }
    /**
    * A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
    
    This flag only takes effect when `file` is set.
    
    *
    * @return bool|null
    */
    public function getReturnMetadata() : ?bool
    {
        return $this->returnMetadata;
    }
    /**
    * A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
    
    This flag only takes effect when `file` is set.
    
    *
    * @param bool|null $returnMetadata
    *
    * @return self
    */
    public function setReturnMetadata(?bool $returnMetadata) : self
    {
        $this->initialized['returnMetadata'] = true;
        $this->returnMetadata = $returnMetadata;
        return $this;
    }
    /**
     * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
     *
     * @return mixed[]|null
     */
    public function getExpand() : ?array
    {
        return $this->expand;
    }
    /**
     * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
     *
     * @param mixed[]|null $expand
     *
     * @return self
     */
    public function setExpand(?array $expand) : self
    {
        $this->initialized['expand'] = true;
        $this->expand = $expand;
        return $this;
    }
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @return string
     */
    public function getUser() : string
    {
        return $this->user;
    }
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @param string $user
     *
     * @return self
     */
    public function setUser(string $user) : self
    {
        $this->initialized['user'] = true;
        $this->user = $user;
        return $this;
    }
}